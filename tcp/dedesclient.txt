Programación con sockets TCP/IP en L INUX
Germán Poo Caamaño
<gpoo@ubiobio.cl>
2 de abril de 2001
Índice General
1 Aplicaciones y TCP/IP 2
2 Estructura de dirección 3
3 Primitivas básicas 4
3.1 socket . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
3.2 bind . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
3.3 close . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
3.4 shutdown . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
4
5
6
Sockets UDP 6
4.1 sendto . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
4.2 recvfrom . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
Sockets TCP 8
5.1 connect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
5.2
5.3 listen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
accept . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
11
5.4 send/recv . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
Relación entre sockets y descriptores de archivos
1
121 APLICACIONES Y TCP/IP
7
8
Funciones útiles 12
7.1 inet_addr . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
7.2 inet_ntoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
7.3 gethostname . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
7.4 gethostbyname . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
7.5 htonl, ntohl, htons, ntohs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
7.6 select . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
Ejemplos 15
8.1 Cliente UDP: echo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
8.2 Servidor UDP: echo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
8.3 Cliente TCP: echo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
8.4 Servidor TCP: echo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
1 Aplicaciones y TCP/IP
Los programas pueden emplear principalmente TCP o UDP para comunicación con un host remoto en In-
ternet. Ambos servicios trabajan sobre el protocolo de red IP. TCP es un servicio de “flujos” confiable que
requiere la fase de establecimiento de una conexión entre ambos hosts. UDP no es un servicio confiable y
no requiere el establicimiento de una conexión antes de transmitir.
El orden general de las llamadas a la biblioteca en una sesión de comunicación UDP es de la siguiente
manera:
socket ()
bind ()
sendto () y/o recvfrom()
close ()
Para los clientes TCP, el orden de las llamadas a la biblioteca es de la siguiente forma:
socket ()
bind ()
connect ()
send() y/o recv ()
close ()
Para los programas servidores TCP, el orden de las llamadas a la biblioteca es de la siguiente forma:
socket ()
bind ()
listen ()
accept ()
22 ESTRUCTURA DE DIRECCIÓN
send() y/o recv ()
close ()
2 Estructura de dirección
Desde el punto de vista de programación de una aplicación, la diferencia entre protocolos de red es el
esquema de direcciones empleado. Por otro lado, las operaciones como connect, send, receive y close
probablemente son las cosas en que debe pensar el programador al momento de diseñar una aplicación de
red. Para TCP/IP, una API ideal será aquella que entienda las direcciones IP y los puertos. Ya que la
biblioteca de sockets fue diseñada para utilizar múltiples protocolos, las direcciones se referencian con una
estructura genérica de la siguiente forma:
struct sockaddr {
unsigned short sa_family ;
char sa_data [14];
}
El campo sa_family especifica el tipo de protocolo. Para TCP/IP, este campo siempre es PF_INET. Los
14 bytes restantes (sa_data) de esta estructura depende siempre del protocolo. Para TCP/IP, las direcciones
IP y los números de puerto se ubican en este campo. Para facilitar la operación con estos campos, se emplea
un tipo específico de estructura de dirección de socket.
struct sockaddr_in {
unsigned short sin_family ;
unsigned short sin_port ;
struct in_addr sin_addr ;
char
sin_zero [8];
}
No es aparente, estas estructuras son compatibles entre sí. Ambas tienen un tamaño de 16 bytes. Tam-
bién se puede ver que los dos primeros bytes de cada estructura representa la familia. Así, una estructura
sockaddr_in siempre puede ser moldeado a una estrucura sockaddr.
Una estructura sockaddr_in contiene una estructura in_addr como campo, la cual tiene la siguiente for-
ma:
struct sockaddr_in
Al revisar los archivos de cabacera se aprecia que no tiene la forma de estructura. Es muy complicado di-
señar una unión que mantenga una dirección IP de varias formas. Independiente de eso, la estructura in_addr
tiene exactamente 4 bytes, el cual es el mismo tamaño de una dirección IP. En la estructura sockaddr_in, el
campo sin_port es una valor sin signo de 16-bit usado para representar un número de puerto. Es importante
recordar que estos campos siempre necesitan interpretarse en términos de red. Por ejemplo:
33 PRIMITIVAS BÁSICAS
struct sockaddr_in sin ;
sin . sin_family = PF_INET;
sin . sin_port = htons(9999) ;
sin . sin_addr . s_addr = inet_addr ("146.83.195.15" );
En el ejemplo, la estructura sin contiene la dirección IP 146.83.195.15 y hace referencia al número de
puerto 9999. Hay dos funciones que se usan para asignar dichos valores: htons e inet_addr. La función
htons retorna el argumento de tipo entero en un entero de red. La función inet_addr convierte el argumento
de tipo string en un entero de 32 bits. Dicho valor también es un entero de red.
La estructura anterior podría emplearse para referenciar al host y a la aplicación que se le entregará el
datagrama. Los usos de la estructura sockaddr_in se explicarán más adelante.
3 Primitivas básicas
3.1 socket
La llamada a la bibliote socket tiene el siguiente prototipo:
int socket ( int family , int type , int protocol ) ;
Esta función crea un punto de comunicación. El valor que retorna esta función es un descriptor del socket
creado. Este número se emplea como parámetro en casi todas las llamadas al resto de las funciones de la
biblioteca.
Ya que el objetivos de este documento es trabajar con sockets en TCP/IP, el parámetro family será
PF_INET (en otros casos podría ser PF_INET6, PF_IPX, PF_PACKET, etc.). El parámetro type depen-
derá del tipo de transporte que se desee emplear, usualmente SOCK_STREAM para TCP, SOCK_DGRAM
para UDP y SOCK_RAW para acceder en forma directa a los protocolos de red. El campo protocol se usa
para especificar un protocolo particular en el caso que el modelo de red soporte diferentes tipos de streams
y/o datagramas. Sin embargo, TCP/IP sólo tiene un tipo de protocolo en cada caso, así que el valor para este
campo será 0.
Ejemplos:
/   Para crear un socket UDP   /
int sockfd ;
sockfd = socket (PF_INET, SOCK_DGRAM, 0);
/   Para crear un socket TCP   /
int sockfd ;
sockfd = socket (PF_INET, SOCK_STREAM, 0);
43 PRIMITIVAS BÁSICAS
3.2 bind
3.2 bind
Antes de enviar y recibir datos a través de un socket, se debe asociar el socket con un puerto local y una
interfaz de red. El mapeo de un socket TCP/UDP a un puerto local de una dirección IP se llama “binding”.
Puede existir el caso donde el socket se use como servidor, y este debe ser capaz de escuchar los re-
querimientos de un cliente en un puerto específico. También puede ser el caso que un programa cliente no
necesite un puerto local específico, ya que tanto el envío como recepción de los mensajes se hará a través de
un puerto específico en el host remoto.
Una mayor complicación se encuentra cuando se dispone más de una interfaz de red en el host en el
cual se ejecutará el programa. Para ello, se deberá responder bien la pregunta “¿por cuál red debo enviar los
datos?”. La función bind se usa para asociar el socket, el puerto TCP/UDP local y la interfaz de red.
El prototipo para la función bind es de la siguiente manera:
int bind ( int socket , struct sockaddr   address , socklen_t address_length ) ;
El primer argumento es un descriptor de socket (el número retornado por la función socket).
El segundo argumento (address) es una estructura con la dirección del socket, la cual preparará al socket
para comunicarse con otros hosts. En TCP/IP corresponde a la estructura sockaddr_in. El campo sin_port
del argumento address es el número de puerto local asociado con el socket, de esta forma, cada operación
de envío a través del socket, el campo puerto de origen en el header TCP/UDP obtendrá dicho valor. Si no
se requiere especificar un puerto exacto, se asigna el valor INADDR_ANY(0), con el cual se permite que
el sistema operativo asigne algún puerto disponible. El campo sin_addr especifica la interfaz de red que se
empleará. Debido a que muchos hosts sólo tienen una interfaz de red y sólo una dirección IP, este campo
debiera asignarse con las direcciones propias del host. Sin embargo, la biblioteca socket provee una forma
no inmediata para determinar el host y su dirección IP, al especificar el valor de INADDR_ANY(0) en este
campo, se le estará indicando al sistema operativo que asigne cualquier interfaz y dirección disponible.
El tercer parámetro entregado a bind es el largo de la estructura sockaddr_in.
El uso de la función bind se puede ilustrar de la siguiente forma:
int sockfd ;
struct sockaddr_in sin ;
sockfd = socket (PF_INET, SOCK_DGRAM, 0);
bzero(&sin , sizeof ( sin ) ) ;
sin . sin_family = PF_INET;
sin . sin_addr . s_addr = htonl (INADDR_ANY);
sin . sin_port = htons(9999) ;
bind(sockfd , ( struct sockaddr   ) &sin , sizeof ( sin ) ) ;
54 SOCKETS UDP
3.3 close
Es recomendable verificar el valor de retorno de la función bind. En el caso de fallar retornará -1 si el
que puerto que se está solicitando ya se encuentra en uso ("bind: Address already in use"). Cuando se hace
la llamada bind sobre un socket UDP, el socket se encuentra preparado para enviar y recibir datagramas.
Para los sockets TCP, el socket se encontrará preparado para realizar las llamadas a las funciones connect o
accept, dependiendo si se trata de un cliente o un servidor.
3.3 close
Cuando termina la transferencia de datos, se utiliza la función close sobre el socket, como si se tratara de un
archivo. Por lo tanto, el prototipo de la función será:
int close ( int socket ) ;
Donde socket es el descriptor del socket.
Para los sockets UDP, este liberará la propiedad sobre el puerto local que se encuentra enlazado al
socket. Para TCP, este iniciará un shutdown en ambos extremos de la comunicación, y ambos hosts liberaran
la propiedad del puerto.
Si un socket TCP llama a la función close, cualquier llamada recv pendiente o subsecuente por el host
remoto retornará 0, indicando que la conexión ha sido terminada en el otro lado del canal de comunicación.
Intentar usar la llamada send sobre un soket conectado a un host que ha llamado a la función close, retornará
-1. A menos que se conozca a priori que el host remoto ha llamado a la función shutdown, se recomienda
que la aplicación llame a la función close sobre el socket para que la conexión TCP termine apropiadamente
en ambos lados.
3.4 shutdown
Los sockets TCP también puede realizar la operación half–close usando la función shutdown. El prototipo
es de la siguiente forma:
int shutdown ( int socket , int how);
Si el argumento how es 0, éste se deshabilitará para continuar leyendo (recv) desde el socket, es decir,
no se permitirán más recepciones. Si how es 1, no se permitirán más envíos (send).
De cualquier forma, el socket aún necesitará ser cerrado con la función close.
4 Sockets UDP
Una vez que se ha creado y enlazado un socket UDP a un puerto local, éste es capaz de enviar y recibir
datagramas. Las funciones para enviar y recibir datagramas son sendto y recvfrom.
64 SOCKETS UDP
4.1 sendto
4.1 sendto
La función sendto tiene el siguiente prototipo:
int sendto ( int socket , void   buffer , int length , int flags , struct sockaddr   dest_address ,
socklen_t address_size ) ;
Donde socket es un socket UDP que ha sido creado y enlazado a un puerto local. buffer es un puntero a
un arreglo de caracteres que serán enviados por la red (contiene la información que se desea transmitir). El
parámetro length especifica la longitud del mensaje. El parámetro flags normalmente es 0, aunque pudiera
habilitar características como: procesar datos fuera de orden, no rutear, no bloquearse, etc.
El parámetro dest_address también es una estructura sockaddr y que se moldea con la estructura soc-
kaddr_in. Se usa el campo sin_addr para especificar la dirección IP de destino y sin_port para indicar el
puerto de destino.
Ejemplo:
int sockfd ;
struct sockaddr_in sin ;
char   msg = "Hola mundo" ;
bzero(&sin , sizeof ( sin ) ) ;
sin . sin_family = PF_INET;
sin . sin_addr . s_addr = inet_addr ("146.83.195.15" );
sin . sin_port = htons(9999) ;
/   ...   /
sendto(sockfd , msg, strlen (msg) , 0, & sin , sizeof ( sin ) ) ;
En el ejemplo anterior, se asume que se creó un socket UDP (sockfd UDP y que ya se encuentra enlazado
a un puerto local. Cuando se llama a la función sendto, se envía un datagrama UDP al host 146.83.195.15. Se
asume que hay un proceso con un socket enlazado al puerto 9999 de dicho host y que se encuentra esperando
con una llamada recvfrom para recibir el contenido del mensaje enviado.
La función sendto retorna el número de bytes enviados o -1 si hubo un error. Con los sockets UDP, no
es usualmente necesario verificar la cantidad de bytes que fueron enviados, dado que esta información se
especifica en el argumento length.
4.2 recvfrom
La función recvfrom tiene el siguiente prototipo:
int recvfrom ( int socket , void   buffer , int length , int flags , struct sockaddr
source_address , socklen_t address_size ) ;
75 SOCKETS TCP
La función recvfrom es similar a sendto. El parámetro buffer es un puntero a un arreglo de caracteres
que se llena con el contenido del datagrama (se almacenará la información que llega desde el emisor). El
argumento length especifica el largo máximo para copiar en buffer y se emplea para prevenir que exista un
error de buffer overrun cuando el datagrama es más grande de lo esperado. El argumento flags normalmente
es 0 y se pueden habilitar las mismas opciones que la función sendto. El argumento source_address es un
puntero a una estructura sockaddr, la cual se llena con una copia de la dirección IP del emisor y el puerto de
origen. El parámetro address_size debe ser inicializado al tamaño de la estructura sockaddr que está siendo
utilizada.
El valor de retorno de recvfrom indica el número de bytes copiados en buffer. Si el espacio especificado
en buffer es menor que length, sólo se copiarán length bytes en buffer y el resto será descartado.
Ejemplo:
int sockfd , n;
struct sockaddr_in sin ;
char recvline [1024];
socklen_t sin_length ;
/   ...   /
sin_length = sizeof ( sin ) ;
n = recvfrom(sockfd , recvline , 1024, 0, ( struct sockaddr   ) &sin, & sin_length ) ;
printf ("%d bytes recibidos desde %s (port %d)\n" , n, inet_ntoa(sin.sin_addr), sin. sin_port ) ;
En el ejemplo, recvfrom esperará hasta recibir un datagrama en el puerto local asociado con el socket
sockfd. La función printf mostrará la información sobre el tamaño, dirección IP de origen y puerto de origen
del datagrama recibido.
Para cualquier socket abierto que haya sido enlazado exitosamente a un puerto, la aplicación puede
emplear las llamadas sendto y recvfrom tantas veces como lo necesite.
La fragmentación es completamente transparente a la apliación que envía y recibe datagramas.
5 Sockets TCP
El orden de las llamadas a las funciones es distinta para el cliente y el servidor. En general siguen la estructura
presentada en la figura 1.
5.1 connect
Esta función es utilizada por el cliente para establecer una conexión TCP con el servidor. La función connect
tiene el siguiente prototipo:
85 SOCKETS TCP
5.1 connect
socket()
bind()
listen()
socket()
connect()
send()
recv()
accept()
bloqueo esperando
conexión del cliente
Establecer conexión
datos (request)
recv()
datos (reply)
send()
Procesamiento
close()
notificación EOF
recv()
close()
Figura 1: Estructura de comunicación entre cliente y servidor TCP
int connect ( int socket , struct sockaddr   server_address , socklen_t address_size ) ;
sockfd es el descriptor creado con la función socket. El parámetro server_address es un puntero a una
estructura sockaddr (que se moldea con la estructura sockaddr_in) y cuyo campos sin_addr y sin_port se
emplean para indicar la dirección IP y puerto de destino (al cual se desea establecer la conexión) respectiva-
mente.
Esta función retorna el control al programa sólo cuando se establece la conexión u ocurre un error (ti-
meout, connection refused, destination unreachable, etc.)
Ejemplo:
int sockfd ;
struct sockaddr_in sin ;
bzero(&sin , sizeof ( sin ) ) ;
sin . sin_family = PF_INET;
sin . sin_addr . s_addr = inet_addr ("146.83.195.15" );
sin . sin_port = htons(9999) ;
95 SOCKETS TCP
5.2 listen
/   ...   /
if ( connect ( sock, & sin , sizeof ( sin ) ) == ✆ 1 ) {
perror ( "Error al intentar conexion (connect)" );
}
5.2 listen
Esta función es invocada sólo por el servidor TCP y se lleva a cabo después de las funciones socket y bind,
y antes de la función accept. listen ejecuta dos acciones:
1. Cuando se crea un socket con la función socket, éste queda en un estado activo y el cliente puede
realizar la conexión. La función listen convierte un socket no conectado en un socket pasivo, es decir,
debería aceptar las solicitudes de conexión dirigidos al socket.
2. Indica al kernel el tamaño de la cola para el socket.
El prototipo para la función listen es de la siguiente forma:
int listen ( int socket , int backlog) ;
El kernel mantiene dos colas para un socket, una para las peticiones de conexión que que se han iniciado
y otra para aquellas en las cuales ya se estableció la conexión. El argumento backlog tiene dos (realmente
tiene más) interpretaciones, dependiendo de la implementación del sistema operativo:
1. Define el largo máximo que la cola de conexiones pendientes puede crecer.
2. Define el número máximo de conexiones etablecidas que se encolarán en un socket dado.
En L INUX se define la longitud máxima a la que puede llegar la cola de conexiones pendientes.
Ejemplo:
int sockfd ;
struct sockaddr_in sin ;
bzero(&sin , sizeof ( sin ) ) ;
sin . sin_family = PF_INET;
sin . sin_addr . s_addr = htonl (INADDR_ANY);
sin . sin_port = htons(9999) ;
/   ...   /
/   Creacion de la cola de conexiones pendientes   /
listen ( sockfd , 1024 ) ;
105 SOCKETS TCP
5.3 accept
5.3 accept
Esta función es invocada sólo por el servidor TCP y retorna la siguiente conexión establecida que se encuen-
tran en la cola de conexiones iniciadas (y aún no establecidas). Si la cola está vacía, entonces queda en un
estado de espera a la llegada de peticiones de conexión.
El prototipo para la función accept es:
int accept ( int socket , struct sockaddr   client_address , socklen_t address_size ) ;
Los argumentos client_address y address_size, indican la dirección (y su tamaño) del cliente. Si la
función accept es exitosa, retorna un nuevo descriptor que hace referencia a la conexión TCP con el cliente,
y con este descriptor se realizan las operaciones de lectura/escritura.
Ejemplo:
int sockfd , nsockfd;
struct sockaddr_in sin , nsin ;
socklen_t nsin_length ;
bzero(&sin , sizeof ( sin ) ) ;
sin . sin_family = PF_INET;
sin . sin_addr . s_addr = htonl (INADDR_ANY);
sin . sin_port = htons(9999) ;
/   ...   /
listen ( sockfd , 1024 ) ;
/   ...   /
nsin_length = sizeof ( nsin ) ;
nsockfd = accept ( sockfd, & nsin , & nsin_length ) ;
Es importante notar que el valor de retorno corresponde a un nuevo descriptor de socket, distinto al
socket empleado con la función listen. Un servidor normalmente crea un sólo socket de escucha, el cual
existe durante toda la ejecución del servidor, y el kernel crea un socket (conectado) por cada conexión a un
cliente que se ha aceptado. Cuando el servidor termina de atender a un cliente, dicho socket se cierra.
5.4 send/recv
El tratamiento de las funciones send y recv es muy similar a sus pares UDP sendto y recvfrom. El prototipo
para ambas funciones es:
int send ( int socket , void   buffer , int length , int flags ) ;
int recv ( int socket , void   buffer , int length , int flags ) ;
117 FUNCIONES ÚTILES
Donde socket es un socket TCP que ha sido creado y enlazado a un puerto de origen. buffer es un puntero
a un arreglo de caracteres que serán envíados/recibidos por la red. El parámetro length específica el largo
del arreglo. El parámetro flags normalmente es 0 (aunque los valores son los mismos que se pueden emplear
para las funciones sendto y recvfrom).
Ambas funciones retorna el número de bytes leídos o escritos si que la operación fue exitosa, en caso
contrario retornan -1 (error).
6 Relación entre sockets y descriptores de archivos
Los descriptores de sockets son valores enteros. En U NIX , el descriptor de un socket puede ser pasado a
muchas funciones POSIX de entrada/salida de bajo nivel. Por ejemplo:
read ( sd , buffer , buffer_length ) ;
write ( sd , buffer , buffer_length ) ;
En el ejemplo, sd podría ser un descriptor de socket o de un archivo. Llamar a la función read en un
socket abierto es equivalente a recv y recvfrom. Sin embargo, si el socket es UDP, entonces la información
acerca del emisor del datagrama no será retornada. De manera similar, la llamada a la función write es
equivalente a send y sendto. Los sockets UDP pueden llamar a la función connect para usar send y write.
Es recomendable que las funciones de la bibliotecas de sockets se usen vez de las funciones equivalentes de
entrada/salida.
El prototipo para las funciones read y write es:
ssize_t read ( int fd , void   buffer , size_t buffer_length ) ;
ssize_t write ( int fd , void   buffer , size_t buffer_length ) ;
La función read intenta leer hasta buffer_length bytes del archivo indicado por fd y los almacena en
espacio de memoria que se inicia en buffer. El valor de retorno corresponde al número de bytes leídos y -1
en caso de error.
La función write escribe hasta buffer_length bytes del archivo indicado por fd y a partir de buffer. El
valor de retorno corresponde al número de bytes escritos y -1 en caso de error.
7 Funciones útiles
Hay varias funciones que no son parte de la biblioteca de sockets, pero que son empleadas en la programación
con sockets. A continuación se da una breve descripción de cada una de ellas.
127 FUNCIONES ÚTILES
7.1 inet_addr
7.1 inet_addr
Si el string contenido en str representa una dirección IP separada por puntos. inet_addr retornará su equiva-
lente en 32-bit en entero de entero de red. Este valor puede ser asignado en el campo sin_addr.s_addr de una
estructura sockaddr_in. Si el string no puede ser interpretado como número IP separado por puntos, retorna
-1 (con casting como unsigned integer).
Prototipo:
unsigned long int inet_addr (const char   cp) ;
7.2 inet_ntoa
Convierte un valor de 32-bit asumido como entero de red y contenido en ip a un string. El puntero retornado
por inet_ntoa contiene el string. Sin embargo, las llamadas subsecuentes a inet_ntoa siempre retornarán el
mismo puntero, así, se recomienda copiar el string a otro buffer antes de llamar a la función nuevamente.
Prototipo:
char   inet_ntoa ( struct in_addr in ) ;
7.3 gethostname
Copia el nombre (hasta lenght bytes) del hostname del computador local en el arreglo de caracteres apuntado
por name.
Prototipo:
int gethostname(char   name, size_t len ) ;
7.4 gethostbyname
struct hostent   gethostbyname(const char   name);
Si el string contenido en strHost representa un nombre de host (tal como “zeus” o “zeus.dci.ubiobio.cl”),
gethostbyname retornará un puntero a una estructura hostent conteniendo información adicional acerca del
host, incluyendo nombres adiionales y direcciones IP asociadas con el host. gethostbyname hará todo el
trabajo de buscas las direcciones en las base de datos local así como realizar las consultas en el DNS.
Retorna NULL si el nombre del host es desconocido.
El formato de la estructura hostent es de la siguiente manera:
struct hostent {
h_name;
char
✝  h_aliases ;
char
int
h_addrtype;
137 FUNCIONES ÚTILES
int
char
7.5 htonl, ntohl, htons, ntohs
h_length ;
✝  h_addr_list ;
};
# define h_addr
h_addr_list [0]
h_name corresponde al nombre oficial de un host.
h_aliases Lista que contiene los nombres alternativos del host.
h_addrtype Indica el tipo de dirección (PF_INET para direcciones IP).
h_length La longitud de la dirección en bytes.
h_addr_list Lista que contiene las direcciones de red para el host.
h_addr La primera dirección en h_addr_list por compatibilidad hacia atrás.
En resumen, la primera dirección es contenida dentro de los primeros 4 bytes de la primera entrada en
h_addr_list. h_addr puede ser usado para referenciar este valor. Usando gethostbyname e inet_addr, se
puede escribir una función que permita convertir strings en direcciones IP equivalente a los números de 32
bits de las llamadas a sockets.
7.5 htonl, ntohl, htons, ntohs
Estas funciones son útiles para convertir números enteros a y desde enteros de red. En procesadores big–
endian (tales como Sun sparc, PowerPC) estas funciones simplemente retornan el valor pasado como argu-
mento. En procesadores little–endian (tal como Intel x86), estas llamadas ejecutan operaciones de intercam-
bio de bytes. En muchas máquinas, htons es equivalente a ntohs. Esto puede no resultar verdadero para los
sistemas de 64 bits u otras arquitecturas.
La causa se debe a que los procesadores big–endian se almacena primero el byte más significativo,
mientras que en little–endian se almacena primero el byte menos significativo. En Internet se emplea big–
endian.
Prototipo:
unsigned long int htonl (unsigned long int hostlong ) ;
unsigned long int ntohl (unsigned long int netlong ) ;
unsigned short int htons(unsigned short int hostshort ) ;
unsigned short int ntohs(unsigned short int netshort ) ;
148 EJEMPLOS
7.6 select
7.6 select
Cuando una aplicación llama a recv o recvfrom ésta se bloquea hasta que recibe datos por ese socket. Una
aplicación podría estar haciendo otras tareas útiles mientras procesa el flujo de datos entrante sea vacío. Otro
problema potencial sucede cuando una aplicación recibe datos desde múltiples sockets. La llamada recv o
recvfrom en un socket que no tiene datos en su cola de entrada previene inmediatamente la recepción de datos
desde otros sockets. La función select resuelve este problema permitiendo que el programa consulte todos
los descriptores de sockets para ver si tienen disponible las operaciones de lectura/escritura no–bloqueante.
El prototipo de la función select es:
int
select ( int n , fd_set   readfds , fd_set   writefds , fd_set   exceptfds , struct timeval
timeout) ;
Los argumentos de la función select se detallan a continuación:
nfds. Alguna implementaciones de sockets ignoran este argumento. Su valor debería ser igual a 1 + el
descriptor de socket con el valor más alto.
readfs. Un puntero a un conjunto de descriptores de archivos y sockets que serán consultados para
operaciones de lectura/escritura no–bloqueante. Puede ser NULL para indicar un conjunto vació.
writefds, exceptfds. Lo mismo que readfds, excepto que este conjunto contiene los descriptores de ar-
chivos/sockets a consultar para operaciones de escritura no–bloqueante y detección de errores. Puede ser
NULL para indicar un conjunto vacío.
timeout. Un puntero a una estructura timeval que especifica cuanto debe esperar la función select para
consultar por descriptores con operaciones de entrada/salida disponible. Si el valor es 0, entonces select
retornará inmediatamente. Si el argumento timout es NULL, entonces select se bloqueará hasta que al
menos un descriptor de archivo/socket se encuentre listo para una operación de entrada/salida. En otro caso,
retornará después de la cantidad de tiempo especificado en timeout haya transcurrido o cuando al menos un
descriptor de archivo/socket se encuentre listo para una operación de entrada/salida.
El valor que retorna select es el número de descriptores especificados en el conjunto de descriptores de
archivos que están preparados para entrada/salida. si se alcanza el tiempo límite especificado en el argumento
timeout, select retornará 0.
8 Ejemplos
A continuación se muestran 4 programas de ejemplos de implementación de un servidor y cliente echo. La
función de un servidor de echo es retransmitir al cliente los mismos bytes que éste le ha enviado.
Las implentaciones incluyen los programas cliente y servidor para UDP y TCP.
8.1 Cliente UDP: echo
158 EJEMPLOS
/
8.1 Cliente UDP: echo
client .c : Cliente echo
Lo que lee por la entrada estandar lo envia al servidor
y recibe una cantidad de bytes equivalentes
Trabaja con UDP, por lo que no verifica si se establecio
la conexion.
/
#define MAXLINE 256
#define SERV_PORT 14000
#include <sys / types .h>
#include <sys / socket .h>
#include < netinet / in .h>
#include <arpa / inet .h>
#include < stdio .h>
void dg_cli (FILE   fp , int sockfd , struct sockaddr   pservaddr , long servlen )
{
int n;
char
sendline [MAXLINE], recvline[MAXLINE+1];
while ( fgets ( sendline , MAXLINE, fp) != NULL) {
sendto(sockfd , sendline , strlen ( sendline ) , 0, pservaddr , servlen ) ;
n = recvfrom(sockfd , recvline , MAXLINE, 0, NULL, NULL);
recvline [n ] = 0; /   null   /
fputs ( recvline , stdout ) ;
}
}
int main( int argc , char  ✝  argv)
{
int sockfd ;
struct sockaddr_in serveraddr ;
if ( argc != 2) {
fprintf ( stdout , "Uso: cliente <direccion IP>\n" );
exit ( ✆ 1);
}
bzero(&serveraddr , sizeof ( serveraddr ) ) ;
serveraddr . sin_family = PF_INET;
168 EJEMPLOS
8.2 Servidor UDP: echo
serveraddr . sin_port = htons(SERV_PORT);
serveraddr . sin_addr . s_addr = inet_addr ( argv [1] ) ;
sockfd = socket (PF_INET, SOCK_DGRAM, 0);
dg_cli ( stdin , sockfd , ( struct sockaddr   ) &serveraddr , sizeof ( serveraddr ) ) ;
exit (0) ;
}
8.2 Servidor UDP: echo
/
server .c : Servidor de echo
Transmite al cliente todo lo que recibe
Lo que recibe lo imprime en la salida estandar ( stdout )
/
#define MAXLINE 256
#define SERV_PORT 14000
#include <sys / types .h>
#include <sys / socket .h>
#include < netinet / in .h>
#include <arpa / inet .h>
void dg_echo(int sockfd , struct sockaddr   pcliaddr , long clilen )
{
int n;
socklen_t len ;
char
msg[MAXLINE];
for (;;) {
len = clilen ;
n = recvfrom(sockfd , msg, MAXLINE, 0, pcliaddr, &len);
sendto(sockfd , msg, n , 0, pcliaddr , len ) ;
}
}
int main( int argc , char  ✝  argv)
{
int sockfd ;
178 EJEMPLOS
8.3 Cliente TCP: echo
struct sockaddr_in serveraddr , cliaddr ;
sockfd = socket (PF_INET, SOCK_DGRAM, 0);
bzero(&serveraddr , sizeof ( serveraddr ) ) ;
serveraddr . sin_family = PF_INET;
serveraddr . sin_addr . s_addr = htonl (INADDR_ANY);
serveraddr . sin_port = htons(SERV_PORT);
bind(sockfd , ( struct sockaddr   ) &serveraddr , sizeof ( serveraddr ) ) ;
dg_echo(sockfd , ( struct sockaddr   ) & cliaddr , sizeof ( cliaddr ) ) ;
}
8.3 Cliente TCP: echo
/
client .c : Es una modificacion al cliente de eco.
Transmite lo que se lee por teclado ( stdin )
Recibe el numero de bytes ( o largo ) de lo
transmitido . El largo lo determina el servidor .
/
#include < stdio .h>
#include <sys / types .h>
#include <sys / socket .h>
#include < netinet / in .h>
#include <netdb .h>
#define SIZE 256
#define MAXLINE 4096
void str_echo (FILE   fp , int sock ) ;
int main( int argc , char   argv [] )
{
int sock ;
/   descriptor del socket creado
char com[SIZE];
/   para las comunicaciones   /
struct sockaddr_in adr ; /   direccion del socket destino
struct hostent   hp ,   gethostbyname() ;
if ( argc != 3 ) {
18
/
/8 EJEMPLOS
8.3 Cliente TCP: echo
fprintf ( stderr , "Uso: %s <host> <port>\n" , argv[0] );
exit (1) ;
}
/   Creacion del socket   /
if ( ( sock = socket ( PF_INET, SOCK_STREAM, 0 ))== ✆ 1 ){
perror ( "Imposible creacion del socket" );
exit (2) ;
}
/   Busqueda de la direccion internet del servidor   /
if ( ( hp = gethostbyname( argv [1] ) ) == NULL ){
perror ( "Error: Nombre de la maquina desconocido" );
exit (3) ;
}
/   Preparacion del socket de destino   /
adr . sin_family = PF_INET;
adr . sin_addr . s_addr = htonl (INADDR_ANY);
adr . sin_port = htons ( atoi ( argv [2] ) ) ;
bcopy( hp ✆ >h_addr, &adr.sin_addr , hp ✆ >h_length );
/   Demanda de conexion   /
if ( connect ( sock, &adr , sizeof ( adr) ) == ✆ 1 ) {
perror ( "connect" );
exit (4) ;
}
str_echo ( stdin , sock ) ;
}
void str_echo (FILE   fp , int sock )
{
char sendline [MAXLINE], recvline[MAXLINE];
int n;
while ( fgets ( sendline , MAXLINE, fp )!= NULL ){
write ( sock , sendline , strlen ( sendline ) ) ;
if ( read ( sock , recvline , MAXLINE )== 0) {
fprintf ( stderr , "Servidor terminado prematuramente\n" );
exit (5) ;
}
fputs ( recvline , stdout ) ;
}
198 EJEMPLOS
8.4 Servidor TCP: echo
}
8.4 Servidor TCP: echo
/
server .c : Es una modificacion al servidor de eco.
Permite multilpes conexiones ( crea procesos hijos )
Se entera cuando un proceso hijo ha terminado
En vez de transmitir lo mismo que se ha recibido ( eco)
envia el numero de bytes que se recibieron
/
#include < stdio .h>
#include < stdlib .h>
#include <sys / types .h>
#include <sys / socket .h>
#include < signal .h>
#include <sys / wait .h>
#include < netinet / in .h>
#include < fcntl .h>
#include <sys / ioctl .h>
#include <netdb .h>
#define PORT 2222
#define MAXLINE 4096
#define TRUE 1
int crearsocket ( int   port , int type ) {
int sockfd ;
struct sockaddr_in adr ;
int longitud ;
if ( ( sockfd = socket ( PF_INET, type, 0) ) == ✆ 1) {
perror ( "Error: Imposible crear socket" );
exit ( 2 ) ;
}
bzero ( ( char   )&adr, sizeof ( adr) ) ;
adr . sin_port = htons(   port ) ;
adr . sin_addr . s_addr = htonl (INADDR_ANY);
adr . sin_family = PF_INET;
208 EJEMPLOS
8.4 Servidor TCP: echo
if ( bind ( sockfd , ( struct sockaddr   ) &adr , sizeof ( adr) ) == ✆ 1 ) {
perror ( "Error: bind" );
exit (3) ;
}
longitud = sizeof ( adr) ;
if ( getsockname( sockfd, &adr, & longitud ) ) {
perror ( "Error: Obtencion del nombre del sock" );
exit (4) ;
}
port = ntohs ( adr . sin_port ) ;
return ( sockfd ) ;
}
void sigchld ()
{
pid_t
int
pid ;
stat ;
pid = wait( & stat ) ;
fprintf ( stderr , "proceso hijo: %d terminado\n" , pid );
return;
}
int main( int argc , char   argv [] )
{
int sock_escucha , sock_servicio ; /   descriptores de los sockets   /
struct sockaddr_in adr ;
/   direccion   /
int lgadr = sizeof (adr) ;
/   longitud de la direccion   /
int port = PORT;
/   puerta del servicio   /
if ( argc != 2 ) {
fprintf ( stderr , "Uso: %s [port]\n" , argv[0]);
exit ( 1 ) ;
}
port = atoi ( argv [1] ) ;
/   Creacion del socket de escucha   /
if ( ( sock_escucha = crearsocket ( &port , SOCK_STREAM ))== ✆ 1) {
fprintf ( stderr , "Error: No se pudo crear/conectar socket\n" );
218 EJEMPLOS
8.4 Servidor TCP: echo
exit ( 2 ) ;
}
signal ( SIGCHLD, sigchld );
/   Creacion de la cola de conexiones pendientes   /
listen ( sock_escucha , 1024 ) ;
fprintf ( stdout , "Inicio servidor en el puerto %d\n" , port );
while(TRUE) {
lgadr = sizeof ( adr) ;
sock_servicio = accept ( sock_escucha, &adr, & lgadr ) ;
fprintf ( stdout , "Servicio aceptado\n" );
if ( fork () == 0 ) {
/   El proceso de servicio no utiliza el socket
de escucha   /
close ( sock_escucha ) ;
/   Llamada a la funcion de servicio   /
servicio ( sock_servicio ) ;
exit (0) ;
}
/   El proceso padre no utiliza el socket de servicio   /
close ( sock_servicio ) ;
}
}
servicio ( int sock )
{
ssize_t n;
char line [MAXLINE];
for (;;) {
if ( ( n = read ( sock , line , MAXLINE ))<= 0)
return;
write ( sock, & line , n ) ;
}
}
22